#
# The BSD 3-Clause License. http://www.opensource.org/licenses/BSD-3-Clause
#
# This file is part of mingw-env project.
# Copyright (c) 2011,2012, by niXman (i dotty nixman doggy gmail dotty com)
# All rights reserved.
# Project: mingw-env ( http://sourceforge.net/projects/mingw-env/ )
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# - Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the distribution.
# - Neither the name of the 'mingw-env' nor the names of its contributors may
#     be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
source common/utils.mfun
# **************************************************************************
# **************************************************************************
# **************************************************************************

# Functions which simplify manipulation of version strings
# Description:
# This mfunc provides functions which simplify manipulating version
# variables.
# Examples:
# Simple Example 1: $VERSION is 1.2.3b, we want 1_2.3b:
#     MY_PV=$(replace_version_separator 1 '_' $VERSION)
#
# Simple Example 2: $VERSION is 1.4.5, we want 1:
#     MY_MAJORV=$(get_major_version $VERSION)
#
# Rather than being a number, the index parameter can be a separator character
# such as '-', '.' or '_'. In this case, the first separator of this kind is
# selected.
#
# There's also:
#     version_is_at_least             want      have
#  which may be buggy, so use with caution.


has() {
	local _needle=$1
	shift
	
	local _x
	for _x in "$@"; do
		[ "${_x}" = "${_needle}" ] && return 0
	done
	return 1
}


# Function: get_all_version_components
# Usage: <version>
# Description:
# Split up a version string into its component parts. If no parameter is
# supplied.
#     0.8.3       ->  0 . 8 . 3
#     7c          ->  7 c
#     3.0_p2      ->  3 . 0 _ p2
#     20040905    ->  20040905
#     3.0c-r1     ->  3 . 0 c - r1
get_all_version_components() {
	mshopts_push -s extglob
	local _ver_str=${1} result
	_result=()

	while [[ -n $_ver_str ]] ; do
		case "${_ver_str::1}" in
			# number: parse whilst we have a number
			[[:digit:]])
				_result+=("${_ver_str%%[^[:digit:]]*}")
				_ver_str=${_ver_str##+([[:digit:]])}
				;;

			# separator: single character
			[-_.])
				_result+=("${_ver_str::1}")
				_ver_str=${_ver_str:1}
				;;

			# letter: grab the letters plus any following numbers
			[[:alpha:]])
				local _not_match=${_ver_str##+([[:alpha:]])*([[:digit:]])}
				# Can't say "${_ver_str::-${#_not_match}}" in Bash 3.2
				_result+=("${_ver_str::${#_ver_str} - ${#_not_match}}")
				_ver_str=${_not_match}
				;;

			# huh?
			*)
				_result+=("${_ver_str::1}")
				_ver_str=${_ver_str:1}
				;;
		esac
	done

	echo ${_result[@]}
	mshopts_pop
}

# Function: get_version_components
# Usage: <version>
# Description:
# Get the important version components, excluding '.', '-' and '_'.
#     0.8.3       ->  0 8 3
#     7c          ->  7 c
#     3.0_p2      ->  3 0 p2
#     20040905    ->  20040905
#     3.0c-r1     ->  3 0 c r1
get_version_components() {
	local _res=$(get_all_version_components "${1}")
	echo ${_res//[-._]/ }
}

# Function: get_major_version
# Usage: <version>
# Description:
# Get the major version of a value.
#     0.8.3       ->  0
#     7c          ->  7
#     3.0_p2      ->  3
#     20040905    ->  20040905
#     3.0c-r1     ->  3
get_major_version() {
	local _res=($(get_all_version_components "${1}"))
	echo ${_res[0]}
}

# Function: get_version_component_range
# Usage: <range> <version>
# Description:
# Get a particular component or range of components from the version.
#    1      1.2.3       -> 1
#    1-2    1.2.3       -> 1.2
#    2-     1.2.3       -> 2.3
get_version_component_range() {
	mshopts_push -s extglob
	local _res _ver="${2}" _range="${1}" _range_start _range_end
	local -i i=-1 j=0
	_res=($(get_all_version_components "${_ver}"))
	_range_start=${_range%-*}; _range_start=${_range_start:-1}
	_range_end=${_range#*-}  ; _range_end=${_range_end:-${#_res[@]}}

	while ((j < _range_start)); do
		i+=1
		((i > ${#_res[@]})) && mshopts_pop && return
		[[ -n "${_res[i]//[-._]}" ]] && j+=1
	done

	while ((j <= _range_end)); do
		echo -n ${_res[i]}
		((i > ${#_res[@]})) && mshopts_pop && return
		[[ -n "${_res[i]//[-._]}" ]] && j+=1
		i+=1
	done
	mshopts_pop
}

# Function: get_after_major_version
# Usage: <version>
# Description:
# Get everything after the major version and its separator (if present)
# of a value.
#     0.8.3       ->  8.3
#     7c          ->  c
#     3.0_p2      ->  0_p2
#     20040905    ->  (empty string)
#     3.0c-r1     ->  0c-r1
get_after_major_version() {
	echo $(get_version_component_range 2- "${1}")
}

# Function: replace_version_separator
# Usage: <search> <replacement> <subject>
# Description:
# Replace the $1th separator with $2 in $3.
# If there are fewer than $1 separators, don't change anything.
#     1 '_' 1.2.3       -> 1_2.3
#     2 '_' 1.2.3       -> 1.2_3
#     1 '_' 1b-2.3      -> 1b_2.3
# Rather than being a number, $1 can be a separator character such as '-', '.'
# or '_'. In this case, the first separator of this kind is selected.
replace_version_separator() {
	mshopts_push -s extglob
	local w _res _ver="${3}"
	declare -i i found=0
	w=${1:-1}
	_res=($(get_all_version_components ${_ver}))
	if [[ ${w} != *[[:digit:]]* ]] ; then
		# it's a character, not an index
		for ((i = 0; i < ${#_res[@]}; i++)); do
			if [[ ${_res[i]} == ${w} ]]; then
				_res[i]=${2}
				break
			fi
		done
	else
		for ((i = 0; i < ${#_res[@]}; i++)); do
			if [[ -n "${_res[i]//[^-._]}" ]]; then
				found+=1
				if ((found == w)); then
					_res[i]=${2}
					break
				fi
			fi
		done
	fi
	_res=${_res[*]}
	echo ${_res// }
	mshopts_pop
}

# Function: replace_all_version_separators
# Usage: <replacement> <subject>
# Description:
# Replace all version separators in $2 with $1.
#     '_' 1b.2.3        -> 1b_2_3
replace_all_version_separators() {
	local _res=($(get_all_version_components "${2:-${PV}}"))
	_res=${_res[@]//[-._]/$1}
	echo ${_res// }
}

# Function: delete_version_separator
# Usage: <search> <subject>
# Description:
# Delete the $1th separator in $2. If
# there are fewer than $1 separators, don't change anything.
#     1 1.2.3       -> 12.3
#     2 1.2.3       -> 1.23
#     1 1b-2.3      -> 1b2.3
# Rather than being a number, $1 can be a separator character such as '-', '.'
# or '_'. In this case, the first separator of this kind is deleted.
delete_version_separator() {
	replace_version_separator "${1}" "" "${2}"
}

# Function: delete_all_version_separators
# Usage: <subject>
# Description:
# Delete all version separators in $1.
#     1b.2.3        -> 1b23
delete_all_version_separators() {
	replace_all_version_separators "" "${1}"
}

# Function: get_version_component_count
# Usage: <version>
# Description:
# How many version components are there in $1?
#     1.0.1       ->  3
#     3.0c-r1     ->  4
get_version_component_count() {
	local _res=($(get_version_components "${1}"))
	echo ${#_res[@]}
}

# Function: get_last_version_component_index
# Usage: <version>
# Description:
# What is the index of the last version component in $1?
# Equivalent to get_version_component_count - 1.
#     1.0.1       ->  2
#     3.0c-r1     ->  3
get_last_version_component_index() {
	echo $(($(get_version_component_count "${1}" ) - 1))
}

# Function: version_is_at_least
# Usage: <want> <have>
# Description:
# Is $2 at least version $1? Intended for use in eclasses
# only. May not be reliable, be sure to do very careful testing before actually
# using this.
version_is_at_least() {
	local _want_s="$1" _have_s="${2}" _res
	version_compare "${_want_s}" "${_have_s}"
	_res=$?
	case $_res in
		1|2)
			return 0
			;;
		3)
			return 1
			;;
		*)
			echo "Vesions compare bug"
			exit 1
#			die "versionator compare bug [atleast, ${_want_s}, ${_have_s}, ${_res}]"
			;;
	esac
}

# Function: version_compare
# Usage: <A> <B>
# Description:
# Takes two parameters (A, B) which are versions. If A is an earlier version
# than B, returns 1. If A is identical to B, return 2. If A is later than B,
# return 3. You probably want version_is_at_least rather than this function.
# May not be very reliable. Test carefully before using this.
version_compare() {
	mshopts_push -s extglob
	local _ver_a=${1} ver_b=${2} parts_a parts_b
	local cur_tok_a cur_tok_b num_part_a num_part_b
	local -i cur_idx_a=0 cur_idx_b=0 prev_idx_a prev_idx_b
	parts_a=( $(get_all_version_components "${_ver_a}" ) )
	parts_b=( $(get_all_version_components "${_ver_b}" ) )

	### compare number parts.
	local -i inf_loop=0
	while true; do
		inf_loop+=1
		((inf_loop > 20)) && \
			echo "versionator compare bug [numbers, ${_ver_a}, ${_ver_b}]"
#			die "versionator compare bug [numbers, ${_ver_a}, ${_ver_b}]"

		# Store the current index to test later
		prev_idx_a=cur_idx_a
		prev_idx_b=cur_idx_b

		# grab the current number components
		cur_tok_a=${parts_a[cur_idx_a]}
		cur_tok_b=${parts_b[cur_idx_b]}

		# number?
		if [[ -n ${cur_tok_a} ]] && [[ -z ${cur_tok_a//[[:digit:]]} ]] ; then
			cur_idx_a+=1
			[[ ${parts_a[cur_idx_a]} == . ]] \
				&& cur_idx_a+=1
		else
			cur_tok_a=
		fi

		if [[ -n ${cur_tok_b} ]] && [[ -z ${cur_tok_b//[[:digit:]]} ]] ; then
			cur_idx_b+=1
			[[ ${parts_b[cur_idx_b]} == . ]] \
				&& cur_idx_b+=1
		else
			cur_tok_b=
		fi

		# done with number components?
		[[ -z ${cur_tok_a} && -z ${cur_tok_b} ]] && break

		# if a component is blank, then it is the lesser value
		[[ -z ${cur_tok_a} ]] && mshopts_pop && return 1
		[[ -z ${cur_tok_b} ]] && mshopts_pop && return 3

		# According to PMS, if we are *not* in the first number part, and either
		# token begins with "0", then we use a different algorithm (that
		# effectively does floating point comparison)
		if (( prev_idx_a != 0 && prev_idx_b != 0 )) \
			&& [[ ${cur_tok_a} == 0* || ${cur_tok_b} == 0* ]] ; then

			# strip trailing zeros
			cur_tok_a=${cur_tok_a%%+(0)}
			cur_tok_b=${cur_tok_b%%+(0)}

			# do a *string* comparison of the resulting values: 2 > 11
			[[ ${cur_tok_a} < ${cur_tok_b} ]] && mshopts_pop && return 1
			[[ ${cur_tok_a} > ${cur_tok_b} ]] && mshopts_pop && return 3
		else
			# to avoid going into octal mode, strip any leading zeros. otherwise
			# bash will throw a hissy fit on versions like 6.3.068.
			cur_tok_a=${cur_tok_a##+(0)}
			cur_tok_b=${cur_tok_b##+(0)}

			# now if a component is blank, it was originally 0 -- make it so
			: ${cur_tok_a:=0}
			: ${cur_tok_b:=0}

			# compare
			((cur_tok_a < cur_tok_b)) && mshopts_pop && return 1
			((cur_tok_a > cur_tok_b)) && mshopts_pop && return 3
		fi
	done

	### number parts equal. compare letter parts.
	local letter_a=
	letter_a=${parts_a[cur_idx_a]}
	if [[ ${#letter_a} -eq 1 && -z ${letter_a/[a-z]} ]] ; then
		cur_idx_a+=1
	else
		letter_a=@
	fi

	local letter_b=
	letter_b=${parts_b[cur_idx_b]}
	if [[ ${#letter_b} -eq 1 && -z ${letter_b/[a-z]} ]] ; then
		cur_idx_b+=1
	else
		letter_b=@
	fi

	# compare
	[[ ${letter_a} < ${letter_b} ]] && mshopts_pop && return 1
	[[ ${letter_a} > ${letter_b} ]] && mshopts_pop && return 3

	### letter parts equal. compare suffixes in order.
	inf_loop=0
	while true ; do
		inf_loop+=1
		((inf_loop > 20)) && \
			echo "versionator compare bug [numbers, ${_ver_a}, ${_ver_b}]"
#			die "versionator compare bug [numbers, ${_ver_a}, ${_ver_b}]"
		[[ ${parts_a[cur_idx_a]} == _ ]] && ((cur_idx_a++))
		[[ ${parts_b[cur_idx_b]} == _ ]] && ((cur_idx_b++))

		cur_tok_a=${parts_a[cur_idx_a]}
		cur_tok_b=${parts_b[cur_idx_b]}
		num_part_a=0
		num_part_b=0

		if has ${cur_tok_a%%+([0-9])} "alpha" "beta" "pre" "rc" "p"; then
			cur_idx_a+=1
			num_part_a=${cur_tok_a##+([a-z])}
			# I don't like octal
			num_part_a=${num_part_a##+(0)}
			: ${num_part_a:=0}
			cur_tok_a=${cur_tok_a%%+([0-9])}
		else
			cur_tok_a=
		fi

		if has ${cur_tok_b%%+([0-9])} alpha beta pre rc p; then
			cur_idx_b+=1
			num_part_b=${cur_tok_b##+([a-z])}
			# I still don't like octal
			num_part_b=${num_part_b##+(0)}
			: ${num_part_b:=0}
			cur_tok_b=${cur_tok_b%%+([0-9])}
		else
			cur_tok_b=
		fi

		if [[ ${cur_tok_a} != ${cur_tok_b} ]]; then
			local suffix
			for suffix in alpha beta pre rc "" p; do
				[[ ${cur_tok_a} == ${suffix} ]] && mshopts_pop && return 1
				[[ ${cur_tok_b} == ${suffix} ]] && mshopts_pop && return 3
			done
		elif [[ -z ${cur_tok_a} && -z ${cur_tok_b} ]]; then
			break
		else
			((num_part_a < num_part_b)) && mshopts_pop && return 1
			((num_part_a > num_part_b)) && mshopts_pop && return 3
		fi
	done

	# At this point, the only thing that should be left is the -r# part
	[[ ${parts_a[cur_idx_a]} == - ]] && ((cur_idx_a++))
	[[ ${parts_b[cur_idx_b]} == - ]] && ((cur_idx_b++))

	# Sanity check
	if [[ ${parts_a[cur_idx_a]/r+([0-9])} || ${parts_b[cur_idx_b]/r+([0-9])} ]]; then
		echo "versionator compare bug [revisions, ${_ver_a}, ${_ver_b}]"
		exit 1
#		die "versionator compare bug [revisions, ${_ver_a}, ${_ver_b}]"
	fi

	num_part_a=${parts_a[cur_idx_a]#r}
	num_part_a=${num_part_a##+(0)}
	: ${num_part_a:=0}
	num_part_b=${parts_b[cur_idx_b]#r}
	num_part_b=${num_part_b##+(0)}
	: ${num_part_b:=0}

	((num_part_a < num_part_b)) && mshopts_pop && return 1
	((num_part_a > num_part_b)) && mshopts_pop && return 3

	### no differences.
	mshopts_pop
	return 2
}

# Function: version_sort
# Usage: <version> [more versions...]
# Description:
# Returns its parameters sorted, highest version last. We're using a quadratic
# algorithm for simplicity, so don't call it with more than a few dozen items.
# Uses version_compare, so be careful.
version_sort() {
	mshopts_push -s extglob
	local items=
	local -i left=0
	items=("$@")
	while ((left < ${#items[@]})); do
		local -i lowest_idx=left
		local -i idx=lowest_idx+1
		while ((idx < ${#items[@]})); do
			version_compare "${items[lowest_idx]}" "${items[idx]}"
			[[ $? -eq 3 ]] && lowest_idx=idx
			idx+=1
		done
		local tmp=${items[lowest_idx]}
		items[lowest_idx]=${items[left]}
		items[left]=${tmp}
		left+=1
	done
	echo ${items[@]}
	mshopts_pop
}

# Function: version_format_string
# Usage: <format> <version>
# Description:
# Reformat complicated version strings.  The first argument is the string
# to reformat with while the rest of the args are passed on to the
# get_version_components function.  You should make sure to single quote
# the first argument since it'll have variables that get delayed expansions.
# Example:
# P="utils-mingw-1.2.3_p4"
# MY_P=$(version_format_string '${P}_source_$1_$2-$3_$4')
# Now MY_P will be: utils-mingw_source_1_2-3_p4
version_format_string() {
	local _fstr=$1
	shift
	set -- $(get_version_components "$@")
	eval echo "${_fstr}"
}

# **************************************************************************
# **************************************************************************
# **************************************************************************
